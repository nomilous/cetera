// Generated by CoffeeScript 1.8.0
var ProductionCache, cache, fs, md5, moment, path, uglify;

path = require('path');

fs = require('fs');

uglify = require('uglify-js');

md5 = require('MD5');

moment = require('moment');

require('moment-timezone');

cache = {};

module.exports = ProductionCache = (function() {
  function ProductionCache() {}

  ProductionCache.prototype.route = function(conf) {
    var app, cache_control, cache_control_file, cache_seconds, concat_script, concat_script_name, current_checksum, name, script, scripts, src, tag, version;
    app = conf.app;
    scripts = conf.scripts;
    src = conf.src;
    name = conf.name;
    cache_seconds = conf.cache_seconds || 86400;
    version = conf.version || '0.0.0';
    cache_control_file = __dirname + ("/." + name.cache_control);
    concat_script_name = "/" + name + "-" + version + ".min.js";
    tag = "<script src='" + concat_script_name + "', type='text/javascript'></script>";
    concat_script = uglify.minify((function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = scripts.length; _i < _len; _i++) {
        script = scripts[_i];
        _results.push(src + '/' + script);
      }
      return _results;
    })());
    cache_control = void 0;
    try {
      cache_control = JSON.parse(fs.readFileSync(cache_control_file).toString());
    } catch (_error) {}
    if (cache_control != null) {
      current_checksum = md5(concat_script.code);
      if (cache_control.md5 !== current_checksum) {
        cache_control['Last-Modified'] = moment().tz('GMT').format('ddd, DD MMM YYYY hh:mm:ss GMT');
        cache_control.md5 = current_checksum;
      }
    } else {
      cache_control = {};
      cache_control['Last-Modified'] = moment().tz('GMT').format('ddd, DD MMM YYYY hh:mm:ss GMT');
      cache_control.md5 = md5(concat_script.code);
    }
    try {
      fs.writeFileSync(cache_control_file, JSON.stringify(cache_control));
    } catch (_error) {}
    app.head(concat_script_name, function(req, res) {
      res.header({
        'Content-Type': 'text/javascript',
        'Content-Length': concat_script.code.length,
        'Cache-Control': "max-age=" + cache_seconds + ", must-revalidate",
        'Expires': moment(Date.now() + cache_seconds * 1000).tz('GMT').format('ddd, DD MMM YYYY hh:mm:ss GMT'),
        'Last-Modified': cache_control['Last-Modified']
      });
      return res.send('');
    });
    app.get(concat_script_name, function(req, res) {
      res.header({
        'Content-Type': 'text/javascript',
        'Content-Length': concat_script.code.length,
        'Cache-Control': "max-age=" + cache_seconds + ", must-revalidate",
        'Expires': moment(Date.now() + cache_seconds * 1000).tz('GMT').format('ddd, DD MMM YYYY hh:mm:ss GMT'),
        'Last-Modified': cache_control['Last-Modified']
      });
      return res.send(concat_script.code);
    });
    return tag;
  };

  return ProductionCache;

})();
